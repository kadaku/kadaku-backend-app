console.log('Signature App by : Faiz Muhammad Syam, S.Kom - Cafeweb Indonesia');
var dWidth = $(window).width()
var dHeight = $(window).height()
var x = screen.width / 2 - dWidth / 2;
var y = screen.height / 2 - dHeight / 2;
var getUrl = window.location;
// var baseUrl = getUrl.protocol + "//" + getUrl.host + "/" + getUrl.pathname.split('/')[1] + "/";
// var baseUrlNew = getUrl.protocol + "//" + getUrl.host + "/" ;
var wordLimiter = (str, max, suffix) => str.length < max ? str : `${str.substr(0, str.substr(0, max - suffix.length).lastIndexOf(' '))}${suffix}`;

// console.log(baseUrl)

function roundTwo(num) {
	return parseFloat(Math.round(num * 100) / 100).toFixed(2)
}

function preciseRound(num, decimals) {
	var t = Math.pow(10, decimals)
	return (Math.round((num * t) + (decimals > 0 ? 1 : 0) * (Math.sign(num) * (10 / Math.pow(100, decimals)))) / t).toFixed(decimals)
}

function numToCurr(a) {
	if (a !== null) {
		a = a.toString()
		var b = a.replace(/[^\d\,]/g, '')
		var dump = b.split(',')
		var c = '';
		var lengthchar = dump[0].length;
		var j = 0;
		for (var i = lengthchar; i > 0; i--) {
			j = j + 1;
			if (((j % 3) == 1) && (j != 1)) {
				c = dump[0].substr(i - 1, 1) + '.' + c;
			} else {
				c = dump[0].substr(i - 1, 1) + c;
			}
		}

		if (dump.length > 1) {
			if (dump[1].length > 0) {
				c += ',' + dump[1];
			} else {
				c += ',';
			}
		}
		return c;
	} else {
		return '0';
	}
}

function moneyFomat(num) {
	if (num >= 0) {
		if (num.toString().indexOf('.') !== -1) {
			var coma = roundToTwo(num).toString().split('.')
			var new_coma = numToCurr(coma[0])
			var new_coma2 = '';
			if (coma[1] !== undefined && coma[1].length === 1) {
				new_coma2 = coma[1] + '0';
			}
			else if (coma[1] === undefined) {
				new_coma2 = '00';
			}
			else {
				new_coma2 = coma[1]
			}
			var new_num = new_coma + ',' + new_coma2;
			return new_num;
		} else {
			return numToCurr(num)
		}
	}
	if (num < 0) {
		if (Math.abs(num).toString().indexOf('.') !== -1) {
			var coma = roundToTwo(num).toString().split('.')
			var new_coma = numToCurr(coma[0])
			var new_coma2 = '';

			if (((coma[1] !== undefined) ? coma[1] : '0').length === 1) {
				new_coma2 = ((coma[1] !== undefined) ? coma[1] : '0') + '0';
			} else {
				new_coma2 = coma[1]
			}
			var new_num = new_coma + ',' + new_coma2;
			return '-' + new_num;
		} else {
			return '-' + numToCurr(num)
		}
	}
}

function moneyFomatServer(value) {
	var str = value.toString().split('.').join('')
	var new_str = str.replace(/,/g, '.')
	return new_str;
}

function clearMoneyFormat(obj) {
	var value = obj.value;
	var str = value.toString().split('.').join('')
	var new_str = str.replace(/,/g, '.')
	obj.value = new_str;
}

function setMoneyFormat(obj) {
	var value = obj.value;
	obj.value = moneyFomat(value)
}

function IsNumeric(input) {
	return (input - 0) == input && (input + '').replace(/^\s+|\s+$/g, "").length > 0;
}

function strip(html) {
	var tmp = document.createElement("div")
	tmp.innerHTML = html;
	return tmp.textContent || tmp.innerText || "";
}

function round(value, precision, mode) {
	var m, f, isHalf, sgn; // helper variables
	precision |= 0; // making sure precision is integer
	m = Math.pow(10, precision)
	value *= m;
	sgn = (value > 0) | -(value < 0) // sign of the number
	isHalf = value % 1 === 0.5 * sgn;
	f = Math.floor(value)

	if (isHalf) {
		switch (mode) {
			case 'PHP_ROUND_HALF_DOWN':
				value = f + (sgn < 0) // rounds .5 toward zero
				break;
			case 'PHP_ROUND_HALF_EVEN':
				value = f + (f % 2 * sgn) // rouds .5 towards the next even integer
				break;
			case 'PHP_ROUND_HALF_ODD':
				value = f + !(f % 2) // rounds .5 towards the next odd integer
				break;
			default:
				value = f + (sgn > 0) // rounds .5 away from zero
		}
	}

	return (isHalf ? value : Math.round(value)) / m;
}

function numberFormat(a, b, c, d) {
	a = Math.round(a * Math.pow(10, b)) / Math.pow(10, b)
	e = a + '';
	f = e.split('.')
	if (!f[0]) {
		f[0] = '0';
	}
	if (!f[1]) {
		f[1] = '';
	}
	if (f[1].length < b) {
		g = f[1]
		for (i = f[1].length + 1; i <= b; i++) {
			g += '0';
		}
		f[1] = g;
	}
	if (d != '' && f[0].length > 3) {
		h = f[0]
		f[0] = '';
		for (j = 3; j < h.length; j += 3) {
			i = h.slice(h.length - j, h.length - j + 3)
			f[0] = d + i + f[0] + '';
		}
		j = h.substr(0, (h.length % 3 == 0) ? 3 : (h.length % 3))
		f[0] = j + f[0]
	}
	c = (b <= 0) ? '' : c;
	return f[0] + c + f[1]
}

function dateTimeIndoNew(datetime) {
	bulanIndo = ['', 'Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember'];

	date = datetime.split(" ")[0];
	time = datetime.split(" ")[1];

	tanggal = date.split("-")[2];
	bulan = date.split("-")[1];
	tahun = date.split("-")[0];

	return tanggal + " " + bulanIndo[Math.abs(bulan)] + " " + tahun + " " + time + " WIB";
}

function dateSlash(tanggal) {
	if (tanggal !== undefined && tanggal !== null && tanggal !== 'null') {
		var elem = tanggal.split('-')
		var tahun = elem[0]
		var bulan = elem[1]
		var hari = elem[2]
		return hari + '/' + bulan + '/' + tahun;
	} else {
		return '';
	}
}

function dateToServer(tanggal) {
	var tanggal = tanggal;
	var elem = tanggal.split('/')
	var tahun = elem[2]
	var bulan = elem[1]
	var hari = elem[0]
	return tahun + '-' + bulan + '-' + hari;
}

function dateTimeSlash(datetime) {
	if ((datetime !== undefined) & (datetime !== null)) {
		var el = datetime.split(' ')
		var tgl = dateSlash(el[0])
		var tm = el[1].split(':')
		return tgl + ' ' + tm[0] + ':' + tm[1]
	} else {
		return '-';
	}
}

function dateTimeToServer(datetime) {
	var el = datetime.split(' ')
	var tgl = dateToServer(el[0])
	var tm = el[1].split(':')
	return tgl + ' ' + tm[0] + ':' + tm[1]
}

function angka(obj) {
	a = obj.value;
	b = a.replace(/[^\d]/g, '')
	c = '';
	lengthchar = b.length;
	j = 0;
	for (i = lengthchar; i > 0; i--) {
		j = j + 1;
		if (((j % 3) == 1) && (j != 1)) {
			c = b.substr(i - 1, 1) + '' + c;
		} else {
			c = b.substr(i - 1, 1) + c;
		}
	}
	obj.value = c;
}

function formNum(obj) {
	var a = obj.value;
	if (a === '') {
		a = 0;
	}
	var c = moneyFomat(currencyToNumber(a))
	obj.value = c;
}

function desimal(obj) {
	a = obj.value;
	var reg = new RegExp(/[0-9]+(?:\.[0-9]{0,2})?/g)
	b = a.match(reg, '')
	if (b == null) {
		obj.value = '';
	} else {
		obj.value = b[0]
	}
}

function dotToComma(obj) {
	var a = obj.toString()
	var b = '';
	if (a != null) {
		b = a.replace(/\./g, ',')
	}
	return b;
}

function commaToDot(obj) {
	var a = obj.toString()
	var b = '';
	if (a != null) {
		b = a.replace(/\,/g, '.')
	}
	return b;
}

function numberToCurrency(a) {
	if (a !== null) {
		a = a.toString()
		var b = a.replace(/[^\d\,]/g, '')
		var dump = b.split(',')
		var c = '';
		var lengthchar = dump[0].length;
		var j = 0;
		for (var i = lengthchar; i > 0; i--) {
			j = j + 1;
			if (((j % 3) == 1) && (j != 1)) {
				c = dump[0].substr(i - 1, 1) + '.' + c;
			} else {
				c = dump[0].substr(i - 1, 1) + c;
			}
		}

		if (dump.length > 1) {
			if (dump[1].length > 0) {
				c += ',' + dump[1]
			} else {
				c += ',';
			}
		}
		return c;
	} else {
		return '0';
	}
}

function currencyToNumber(a) {
	var c = '';
	if (a !== null && a !== undefined) {
		c = a.replace(/\.+/g, '')
	}
	return parseFloat(c)
}

function convertToCurrency(obj) {
	if ($(obj).val() !== '') {
		var conv = currencyToNumber($(obj).val())
		$(obj).val(numberToCurrency(conv))
	} else {
		$(obj).val(0)
	}
}

function formatNumber(obj) {
	var a = obj.value;
	obj.value = numberToCurrency(a)
}

function removeMe(el) {
	var parent = el.parentNode.parentNode;
	parent.parentNode.removeChild(parent)
}

function removeHtmlTag(strx) {
	if (strx.indexOf("<") != -1) {
		var s = strx.split("<")
		for (var i = 0; i < s.length; i++) {
			if (s[i].indexOf(">") != -1) {
				s[i] = s[i].substring(s[i].indexOf(">") + 1, s[i].length)
			}
		}
		strx = s.join(" ")
	}
	return strx;
}

function parseDate(str) {
	var m = str.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/)
	return (m) ? new Date(m[3], m[2] - 1, m[1]) : null;
}

function isName(str) {
	var reg = /^[a-zA-Z ]+$/g;
	return reg.test(str)
}

function getCookies(c_name) {
	var i, x, y, ARRcookies = document.cookie.split(";")
	for (i = 0; i < ARRcookies.length; i++) {
		x = ARRcookies[i].substr(0, ARRcookies[i].indexOf("="))
		y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1)
		x = x.replace(/^\s+|\s+$/g, "")
		if (x == c_name) {
			return unescape(y)
		}
	}
}

function setCookies(c_name, value, exminutes) {
	var exdate = new Date()
	exdate.setMinutes(exdate.getMinutes() + exminutes, 0, 0)
	var c_value = escape(value) + ((exminutes == null) ? "" : "; expires=" + exdate.toUTCString())
	document.cookie = c_name + "=" + c_value;
}

function paginationJump(total_data, limit, page, tab) {
	var totalPage = Math.ceil(total_data / limit)

	var first = '<li class="page-item"><a style="cursor:pointer" class="page-link" onclick="paging(1,' + tab + ')">First</a></li>';
	var last = '<li class="page-item"><a style="cursor:pointer" class="page-link" onclick="paging(' + ((totalPage === 0) ? 1 : totalPage) + ',' + tab + ')">Last</a></li>';

	var clickPrev = '';
	if (page > 1) clickPrev = 'onclick="paging(' + (page - 1) + ',' + tab + ')"';
	var prev = '<li class="page-item"><a style="cursor:pointer" class="page-link" ' + clickPrev + '>&laquo;</a></li>';

	var clickNext = '';
	if (page < totalPage) clickNext = 'onclick="paging(' + (page + 1) + ',' + tab + ')"';
	var next = '<li class="page-item"><a style="cursor:pointer" class="page-link" ' + clickNext + '>&raquo;</a></li>';

	var pageNumber = '';
	var start = page - 2;
	var finish = page + 2;
	if (start < 1) start = 1;
	if (finish > totalPage) finish = totalPage;

	for (var p = start; p <= finish; p++) {
		if (p !== page) {
			pageNumber += '<li class="page-item"><a style="cursor:pointer" class="page-link" onclick="paging(' + p + ',' + tab + ')">' + p + '</a></li>';
		} else {
			pageNumber += '<li class="active"><input min="1" class="form-control-paging" onkeyup="mustNumber(this)" type="number" value="' + page + '" style="width:50px;color:var(--vz-pagination-color);background-color:var(--vz-pagination-bg);border:var(--vz-pagination-border-width) solid var(--vz-pagination-border-color);"/><button type="button" style="display:inline-block" class="btn btn-primary btn-sm mb-1" title="Lompat ke halaman" onclick="gotopage(this, ' + tab + ')"><i class="fas fa-search"></i></button></li>' + '';
		}
	}
	return '<div class="dataTables-paginate"><ul class="pagination pagination-sm">' + first + prev + pageNumber + next + last + '</ul></div>';
}

function pagination(total_data, limit, page, tab) {
	var totalPage = Math.ceil(total_data / limit)

	var first = '<li class="page-item"><a style="cursor:pointer" class="page-link" onclick="paging(1,' + tab + ')">First</a></li>';
	var last = '<li class="page-item"><a style="cursor:pointer" class="page-link" onclick="paging(' + ((totalPage === 0) ? 1 : totalPage) + ',' + tab + ')">Last</a></li>';

	var clickPrev = '';
	if (page > 1) clickPrev = 'onclick="paging(' + (page - 1) + ',' + tab + ')"';
	var prev = '<li class="page-item"><a style="cursor:pointer" class="page-link" ' + clickPrev + '>&laquo;</a></li>';

	var click_next = '';
	if (page < totalPage) click_next = 'onclick="paging(' + (page + 1) + ',' + tab + ')"';
	var next = '<li class="page-item"><a style="cursor:pointer" class="page-link" ' + click_next + '>&raquo;</a></li>';

	var pageNumber = '';
	var start = page - 2;
	var finish = page + 2;

	if (start < 1) start = 1;
	if (finish > totalPage) finish = totalPage;

	for (var p = start; p <= finish; p++) {
		if (p !== page) {
			pageNumber += '<li class="page-item"><a style="cursor:pointer" class="page-link" onclick="paging(' + p + ',' + tab + ')">' + p + '</a></li>';
		} else {
			pageNumber += '<li><a style="cursor:pointer" class="page-link active">' + page + '</a></li>' + '';
		}
	}
	return '<div class="dataTables-paginate"><ul class="pagination pagination-sm">' + first + prev + pageNumber + next + last + '</ul></div>';
}

function mustNumber(obj) {
	a = obj.value;
	b = a.replace(/[^\d]/g, '')
	if (b.charAt(0) === '0') {
		b = b.substring(1, b.length)
	}
	c = '';
	lengthchar = b.length;
	j = 0;
	for (i = lengthchar; i > 0; i--) {
		j = j + 1;
		if (((j % 3) == 1) && (j != 1)) {
			c = b.substr(i - 1, 1) + '' + c;
		} else {
			c = b.substr(i - 1, 1) + c;
		}
	}
	if (c === '') {
		c = 0;
	}
	obj.value = c;
}

function gotopage(obj, tab) {
	var a = $(obj).prev().val()
	var b = parseInt(a)
	if (b === 0) {
		b = 1;
	};
	paging(b, tab)
}

function jumpPage(jumlah, limit) {
	return round(jumlah / limit)
}

function pageSummary(total_data, total_datapage, limit, page) {
	var start = ((page - 1) * limit) + 1;

	var finish = (start - 1) + total_datapage;
	if (finish < 1) {
		start = 0;
	};
	var str = '<div class="page-summary">Showing ' + start + ' to ' + finish + ' of ' + total_data + ' entries</div>';
	// var str = '<div class="page-summary">Menampilkan ' + start + ' sampai ' + finish + ' dari ' + total_data + ' entri</div>';
	return str;
}

function syamAjax(url, element) {
	$.ajax({
		url: url,
		dataType: '',
		success: function (response) {
			$(element).html(response)
		},
		error: function (e) {
			alert(e.status)
		}
	})
}

function checkEmpty(element, message) {
	if ($(element).val() == '') {
		syamValidation(element, message)
		$(element).focus()
		return false
	}
}

function syamValidation(element, pesan) {
	$(element).next().remove()
	$(element).after(/* html */ `
  		<div class="error mt-1" style="font-weight:500;background:#ededed;border-radius:5px;color:red;font-size:12px;padding:0 12px">
  			<em>${pesan}</em>
  		</div>`)
		.addClass('has-error is-invalid')
}

function syamValidationGroup(element, pesan) {
	$(element).parent().next().remove()
	$(element).parent().after(/* html */ `
  		<div class="error mt-1" style="font-weight:500;background:#ededed;border-radius:5px;color:red;font-size:12px;padding:0 12px">
  			<em>${pesan}</em>
  		</div>`)
	$(element).addClass('has-error is-invalid')
}

function syamValidationSelect(element, pesan) {
	$(element).next('span').next().remove()
	$(element).next('span').after(/* html */ `
  		<div class="error mt-1" style="font-weight:500;background:#ededed;border-radius:5px;color:red;font-size:12px;padding:0 12px">
  			<em>${pesan}</em>
  		</div>`)
	$(element).addClass('has-error is-invalid')
}

function syamValidationSelect2(element, pesan) {
	$(element).next().remove()
	$(element).after(/* html */ `
  		<div class="error mt-1" style="font-weight:500;background:#ededed;border-radius:5px;color:red;font-size:12px;padding:0 12px">
  			<em>${pesan}</em>
  		</div>`)
	$(element).prev().find('.select2-choice').addClass('is-invalid')
	$(element).prev().find('.select2-choices').addClass('is-invalid')
}

function syamValidationServer(element, data_error, data) {
	if (data.data_error[data_error]) syamValidation(element, data.data_error[data_error])
}

function syamValidationGroupServer(element, data_error, data) {
	if (data.data_error[data_error]) syamValidationGroup(element, data.data_error[data_error])
}

function syamValidationSelectServer(element, data_error, data) {
	if (data.data_error[data_error]) syamValidationSelect(element, data.data_error[data_error])
}

function syamValidationSelect2Server(element, data_error, data) {
	if (data.data_error[data_error]) syamValidationSelect2(element, data.data_error[data_error])
}

function syamValidationRemove(element) {
	$(element).next().remove()
	$(element).closest('.form-control, .custom-select')
		.removeClass('has-error is-invalid')
}

function syamValidationGroupRemove(element) {
	$(element).parent().next().remove()
	$(element).closest('.form-control, .custom-select')
		.removeClass('has-error is-invalid')
}

function syamValidationSelectRemove(element) {
	$(element).next('span').next().remove()
	$(element).removeClass('has-error is-invalid')
}

function syamValidationSelect2Remove(element) {
	$(element).next().remove();
	$(element).prev().find('.select2-choice').removeClass('is-invalid')
	$(element).prev().find('.select2-choices').removeClass('is-invalid')
}

function addZero(i) {
	if (i < 10) i = "0" + i;
	return i;
}

function dateIndonesian(date) {
	var buf = date.split('-')
	var bulan = ''
	switch (buf[1]) {
		case '01': bulan = 'Januari'; break;
		case '02': bulan = 'Februari'; break;
		case '03': bulan = 'Maret'; break;
		case '04': bulan = 'April'; break;
		case '05': bulan = 'Mei'; break;
		case '06': bulan = 'Juni'; break;
		case '07': bulan = 'Juli'; break;
		case '08': bulan = 'Agustus'; break;
		case '09': bulan = 'September'; break;
		case '10': bulan = 'Oktober'; break;
		case '11': bulan = 'November'; break;
		case '12': bulan = 'Desember'; break;
		default:
			break;
	}
	return buf[2] + " " + bulan + " " + buf[0]
}

function dateInd(date = null) {
	if (date !== "" && date !== null && date !== 'undefined') {
		var buf = date.split('-')
		var bulan = ''
		switch (buf[1]) {
			case '01': bulan = 'Januari'; break;
			case '02': bulan = 'Februari'; break;
			case '03': bulan = 'Maret'; break;
			case '04': bulan = 'April'; break;
			case '05': bulan = 'Mei'; break;
			case '06': bulan = 'Juni'; break;
			case '07': bulan = 'Juli'; break;
			case '08': bulan = 'Agustus'; break;
			case '09': bulan = 'September'; break;
			case '10': bulan = 'Oktober'; break;
			case '11': bulan = 'November'; break;
			case '12': bulan = 'Desember'; break;
			default:
				break;
		}
		return buf[2] + " " + bulan + " " + buf[0]
	} else {
		return '';
	}
}

function dateTimeInd(datetime = null) {
	if (datetime !== "" && datetime !== null && datetime !== 'undefined') {
		bulanIndo = [
			'',
			'Januari',
			'Februari',
			'Maret',
			'April',
			'Mei',
			'Juni',
			'Juli',
			'Agustus',
			'September',
			'Oktober',
			'November',
			'Desember'
		];

		date = datetime.split(" ")[0];
		time = datetime.split(" ")[1];

		tanggal = date.split("-")[2];
		bulan = date.split("-")[1];
		tahun = date.split("-")[0];

		return tanggal + " " + bulanIndo[Math.abs(bulan)] + " " + tahun + " " + time;
	} else {
		return '';
	}
}

function getMonthFormat(date) {
	var buf = date.split('/')
	var bulan = ''
	switch (buf[0]) {
		case '1': bulan = 'Januari'; break;
		case '2': bulan = 'Februari'; break;
		case '3': bulan = 'Maret'; break;
		case '4': bulan = 'April'; break;
		case '5': bulan = 'Mei'; break;
		case '6': bulan = 'Juni'; break;
		case '7': bulan = 'Juli'; break;
		case '8': bulan = 'Agustus'; break;
		case '9': bulan = 'September'; break;
		case '10': bulan = 'Oktober'; break;
		case '11': bulan = 'November'; break;
		case '12': bulan = 'Desember'; break;
		default:
			break;
	}
	return bulan + " " + buf[1]
}

function romanize(num) {
	if (!+num)
		return false;
	var digits = String(+num).split(""),
		key = ["", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM",
			"", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC",
			"", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"],
		roman = "",
		i = 3;
	while (i--)
		roman = (key[+digits.pop() + (i * 10)] || "") + roman;
	return Array(+digits.join("") + 1).join("M") + roman;
}

function deromanize(str) {
	var str = str.toUpperCase(),
		validator = /^M*(?:D?C{0,3}|C[MD])(?:L?X{0,3}|X[CL])(?:V?I{0,3}|I[XV])$/,
		token = /[MDLV]|C[MD]?|X[CL]?|I[XV]?/g,
		key = { M: 1000, CM: 900, D: 500, CD: 400, C: 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1 },
		num = 0, m;
	if (!(str && validator.test(str)))
		return false;
	while (m = token.exec(str))
		num += key[m[0]]
	return num;
}

function timeSince(date) {
	var seconds = Math.floor((new Date() - date) / 1000)
	var interval = Math.floor(seconds / 31536000)

	if (interval > 1) return interval + " years";
	interval = Math.floor(seconds / 2592000)
	if (interval > 1) return interval + " months";
	interval = Math.floor(seconds / 86400)
	if (interval > 1) return interval + " days";
	interval = Math.floor(seconds / 3600)
	if (interval > 1) return interval + " hours";
	interval = Math.floor(seconds / 60)
	if (interval > 1) return interval + " minutes";
	return Math.floor(seconds) + " seconds";
}

function strtotime(d) {
	return new Date(d).getTime()
}

function setInputFilter(textbox, inputFilter) {
	["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop"].forEach(function (event) {
		textbox.addEventListener(event, function () {
			if (inputFilter(this.value)) {
				this.oldValue = this.value;
				this.oldSelectionStart = this.selectionStart;
				this.oldSelectionEnd = this.selectionEnd;
			} else if (this.hasOwnProperty("oldValue")) {
				this.value = this.oldValue;
				this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd)
			}
		})
	})
}

function justNumber(evt) {
	var charCode = (evt.which) ? evt.which : event.keyCode
	if (charCode > 31 && (charCode < 45 || charCode > 57) && charCode > 32)
		return false;
	return true;
}

function dateTimeNow() {
	var now = new Date()
	var year = now.getFullYear()
	var month = now.getMonth() + 1;
	var day = now.getDate()
	var hour = now.getHours()
	var minute = now.getMinutes()
	var second = now.getSeconds()
	if (month.toString().length == 1) var month = '0' + month;
	if (day.toString().length == 1) var day = '0' + day;
	if (hour.toString().length == 1) var hour = '0' + hour;
	if (minute.toString().length == 1) var minute = '0' + minute;
	if (second.toString().length == 1) var second = '0' + second;

	var dateTime = year + '-' + month + '-' + day;
	return dateIndonesian(dateTime) + ' ' + hour + ':' + minute + ':' + second;
}

function dateNow() {
	var now = new Date()
	var year = now.getFullYear()
	var month = now.getMonth() + 1;
	var day = now.getDate()

	if (month.toString().length == 1) var month = '0' + month;
	if (day.toString().length == 1) var day = '0' + day;

	var dateTime = year + '-' + month + '-' + day;
	return dateTime;
}

function dateTime(id, opsi = 'val') {
	date = new Date;
	year = date.getFullYear()
	month = date.getMonth()
	months = new Array('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')
	d = date.getDate()
	day = date.getDay()
	days = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')
	h = date.getHours()
	if (h < 10) {
		h = "0" + h;
	}
	m = date.getMinutes()
	if (m < 10) {
		m = "0" + m;
	}
	s = date.getSeconds()
	if (s < 10) {
		s = "0" + s;
	}
	if (d < 10) {
		d = "0" + d;
	}
	result = d + '/' + months[month] + '/' + year + ' ' + h + ':' + m + ':' + s;
	if (opsi == 'html') {
		document.getElementById(id).innerHTML = result;
		setTimeout('dateTime("' + id + '", "' + opsi + '")', '1000')
	} else {
		if (document.getElementById(id).value !== null) {
			document.getElementById(id).value = result;
			setTimeout('dateTime("' + id + '", "' + opsi + '")', '1000')
		}
	}
	return true;
}

function time(id, opsi = 'val') {
	date = new Date;
	h = date.getHours()
	if (h < 10) {
		h = "0" + h;
	}
	m = date.getMinutes()
	if (m < 10) {
		m = "0" + m;
	}
	s = date.getSeconds()
	if (s < 10) {
		s = "0" + s;
	}
	result = h + ':' + m + ':' + s;
	if (opsi == 'html') {
		document.getElementById(id).innerHTML = result;
		setTimeout('time("' + id + '", "' + opsi + '")', '1000')
	} else {
		if (document.getElementById(id).value !== null) {
			document.getElementById(id).value = result;
			setTimeout('time("' + id + '", "' + opsi + '")', '1000')
		}
	}
	return true;
}

function dateTimeX(id, opsi = 'val') {
	date = new Date;
	year = date.getFullYear()
	month = date.getMonth()
	months = new Array('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12')
	d = date.getDate()
	day = date.getDay()
	days = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')
	h = date.getHours()
	if (h < 10) {
		h = "0" + h;
	}
	m = date.getMinutes()
	if (m < 10) {
		m = "0" + m;
	}
	s = date.getSeconds()
	if (s < 10) {
		s = "0" + s;
	}
	if (d < 10) {
		d = "0" + d;
	}
	result = d + '/' + months[month] + '/' + year + ' ' + h + ':' + m + ':' + s;
	if (opsi === 'html') {
		document.getElementById(id).innerHTML = result;
		setTimeout('dateTimeX("' + id + '", "' + opsi + '")', '1000')
	} else {
		if (document.getElementById(id).value !== null) {
			document.getElementById(id).value = result;
			setTimeout('dateTimeX("' + id + '", "' + opsi + '")', '1000')
		}
	}

	return true;
}

// requestAnimationFrame(animateClock)

// function animateClock() {
// 	var months = [
// 		'Januari', 
// 		'Februari', 
// 		'Maret', 
// 		'April', 
// 		'Mei', 
// 		'Juni', 
// 		'Juli', 
// 		'Agustus', 
// 		'September', 
// 		'Oktober', 
// 		'November', 
// 		'Desember'
// 	]
// 	var myDays = [
// 		'Minggu', 
// 		'Senin', 
// 		'Selasa', 
// 		'Rabu', 
// 		'Kamis', 
// 		'Jum&#39;at', 
// 		'Sabtu'
// 	]
// 	var date = new Date()
// 	var day = date.getDate()
// 	var month = date.getMonth()
// 	var thisDay = date.getDay(),
// 		thisDay = myDays[thisDay]
// 	var yy = date.getYear()
// 	var year = (yy < 1000) ? yy + 1900 : yy;
// 	var Hari = thisDay + ', ' + day + ' ' + months[month] + ' ' + year;

// 	var now = new Date()
// 	var secs = ('0' + now.getSeconds()).slice(-2)
// 	var mins = ('0' + now.getMinutes()).slice(-2)
// 	var hr = ('0' + now.getHours()).slice(-2)
// 	var Time = " - " + hr + " : " + mins + " : " + secs + " WIB";
// 	document.getElementById('animate-clock').innerHTML = Hari + Time;
// 	requestAnimationFrame(animateClock)
// }

function getAge(birth_date) {
	if (birth_date !== '') {
		const d = new Date()
		const e = new Date(dateToServer(birth_date))
		let year = d.getFullYear()
		let birth_year = e.getFullYear()
		let age = year - birth_year;
		return age;
	}
}

function swalAlert(type, title, message) {
	Swal.fire({
		icon: type,
		title: title,
		html: message,
		showConfirmButton: true,
		allowOutsideClick: false,
		// timer: 3000
	})
}

function errorAlertAjax(param) {
	Swal.fire({
		icon: 'error',
		title: 'Error',
		html: param,
		showConfirmButton: false,
		allowOutsideClick: false,
		timer: 2000
	})
}

function showLoader() {
	$('body').block({
		message: `<div style="margin-top:3px">
									<img src="storage/images/loaders/spinner-loader.gif" width="100" height="100">
							</div>`,
		css: {
			top: '0px',
			border: '0px solid #ccc',
			padding: '5px',
			position: 'fixed',
			// backgroundColor: '#f4f4f4',
			backgroundColor: 'transparent',
			'-webkit-border-radius': '10px',
			'-moz-border-radius': '10px',
			opacity: 1,
			width: '300px',
			color: '#000'
		},

		overlayCSS: {
			backgroundColor: '#fff',
			opacity: 0.8,
			cursor: 'wait',
			overflowY: 'hidden',
			position: 'fixed'
		},
	})
}

function pleaseWait() {
	return `<div style="margin: auto;border: 0;width: 150px;padding: 4px 10px;text-align:center;">
							<img src="storage/images/loaders/spinner-loader.gif" style="margin:0px;auto;" width="100">
							<p style="font-size:16px;font-weight:400;text-align:center;margin-top:-0.5rem">Mohon Tunggu...</p>
					</div>`;
}

function hideLoader() {
	$('body').unblock()
}

function toastrAlert(type, title, message) {
	toastr.options = {
		"closeButton": true,
		"debug": false,
		"newestOnTop": true,
		"progressBar": true,
		"positionClass": "toast-top-right",
		// "positionClass": "toast-bottom-right",
		"preventDuplicates": false,
		"showDuration": "300",
		"hideDuration": "1000",
		"timeOut": "5000",
		"extendedTimeOut": "1000",
		"showEasing": "swing",
		"hideEasing": "linear",
		"showMethod": "show",
		"hideMethod": "slideUp"
	}

	toastr[type](message, title)
}

function validateEmail(inputText) {
	var mailformat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
	if (inputText.match(mailformat)) return true;
	else return false;
}

function replaceNbsps(str) {
	var re = new RegExp(String.fromCharCode(160), "g");
	return str.replace(re, " ");
}

function delay(callback, ms) {
	var timer = 0;
	return function () {
		var context = this, args = arguments;
		clearTimeout(timer);
		timer = setTimeout(function () {
			callback.apply(context, args);
		}, ms || 0);
	};
}

function fillDataFileUpload(el, i) {
	var maxFileSize = 10 * 1024 * 1024;
	if (el.files[0].size > maxFileSize) {
		$(el).val('');
		syamValidation(el, 'File yang anda masukkan melebihi maksimal file yang di izinkan');
		return false;
	} else {
		// console.log(el.files[0].type); return false; 
		if (el.files[0].type != 'image/jpeg' &&
			el.files[0].type != 'image/png' &&
			el.files[0].type != 'application/pdf' &&
			el.files[0].type != 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' &&
			el.files[0].type != 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
		) {
			$(el).val('');
			syamValidation(el, 'File yang anda masukkan type file yang tidak di izinkan');
			return false;
		} else {
			syamValidationRemove(el);
			var _size = el.files[0].size;
			var fSExt = new Array('Bytes', 'KB', 'MB', 'GB'),
				j = 0;
			while (_size > 900) {
				_size /= 1024;
				j++;
			}
			var exactSize = Math.ceil(Math.round(_size * 100) / 100) + ' ' + fSExt[j];
			$('#file_size_' + i).html(exactSize);
			$('#file_type_' + i).html(el.files[0].type);
			$('#fancy_img_src_' + i).attr('data-src', URL.createObjectURL(el.files[0]));

			if (el.files[0].type === 'image/jpeg' || el.files[0].type === 'image/png') {
				$('#fancy_img_src_' + i).attr('data-fancybox', '');
				$('#fancy_img_src_' + i).addClass('pointer');
				$('#img_src_' + i).attr('src', baseUrl + 'assets/clouds/images/icons/img.png');
			}
			if (el.files[0].type === 'application/pdf') {
				$('#img_src_' + i).attr('src', baseUrl + 'assets/clouds/images/icons/pdf.png');
			}
			if (el.files[0].type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
				$('#img_src_' + i).attr('src', baseUrl + 'assets/clouds/images/icons/word.png');
			}
			if (el.files[0].type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {
				$('#img_src_' + i).attr('src', baseUrl + 'assets/clouds/images/icons/excel.png');
			}
		}
	}
}

function removeFileUpload(el) {
	Swal.fire({
		title: 'Konfirmasi',
		text: 'Apakah anda yakin ingin menghapus file lampiran ini ?',
		icon: 'question',
		showCancelButton: true,
		confirmButtonColor: '#FF6E31',
		cancelButtonColor: '#6c757d',
		cancelButtonText: '<i class="bx bx-x-circle"></i> Tutup',
		confirmButtonText: '<i class="bx bx-paper-plane"></i> Ya',
		allowOutsideClick: false,
		reverseButtons: true,
	}).then((result) => {
		if (result.isConfirmed) {
			var parent = el.parentNode.parentNode;
			parent.parentNode.removeChild(parent);

			var rowLampiran = $('.lampiran_files').length;
			if (rowLampiran == 0) $('#lampiran').val('').change();
			else $('#lampiran').val(rowLampiran);
			refreshNumberFileLampiran();
		}
	});
}

function refreshNumberFileLampiran() {
	$('.lampiran_files:visible .step_number_lampiran').text(function (i) {
		return i + 1
	})
}

function multipleInputText(element_box_id, name, placeholder = '', value = '') {
	var i = $('.row_' + name).length;
	var btnAdd = `<button type="button" class="btn btn-success w-100" onclick="multipleInputText('${element_box_id}', '${name}', '${placeholder}')"><i class="fas fa-plus-circle"></i></button>`;
	var btnRemove = '';
	if (i != 0) {
		btnAdd = '';
		btnRemove = '<button type="button" class="btn btn-danger w-100" onclick="removeThisElement(this)"><i class="fas fa-trash-alt"></i></button>';
	} else {
		$(`${element_box_id}`).empty();
	}

	var html = `
      <div class="row row_${name} mb-3">
        <div class="col-md-11">
          <input type="text" name="${name}[]" id="${name}_${i}" value="${value}" class="form-control" placeholder="${placeholder} ....">
        </div>
        <div class="col-md-1">
          ${btnAdd}
          ${btnRemove}
        </div>
      </div>
    `;
	$(`${element_box_id}`).append(html);
}

function removeThisElement(element) {
	var parent = element.parentNode.parentNode;
	parent.parentNode.removeChild(parent);
}